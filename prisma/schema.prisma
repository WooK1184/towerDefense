// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model USERS {
  USER_ID        Int    @id @default(autoincrement()) @map("user_id")
  NAME           String @map("name")
  ID             String @unique @map("id")
  PASSWORD       String @map("password")
  GEM            Int @map("gem")

  EQUIP_TOWERS EQUIP_TOWERS[]
  OWN_TOWERS OWN_TOWERS[]
  SCORES SCORES[]

  @@map("users")
}

model EQUIP_TOWERS {
  EQUIP_TOWER_ID  Int @id @default(autoincrement()) @map("equip_tower_id")
  USER_ID         Int @map("user_id")
  TOWER_ID        Int @unique @map("tower_id")

  OWN_TOWERS     OWN_TOWERS?   @relation(fields: [TOWER_ID], references: [TOWER_ID],onDelete: Cascade, onUpdate: Cascade)
  USERS USERS @relation(fields: [USER_ID], references: [USER_ID], onDelete: Cascade, onUpdate: Cascade)

  @@map("equip_towers")
}

model OWN_TOWERS {
  TOWER_ID        Int @id @default(autoincrement()) @map("tower_id")
  USER_ID         Int @map("user_id")
  ID              Int @unique @map("id")
  UPGRADE         Int @map("upgrade")
  
  USERS USERS @relation(fields: [USER_ID], references: [USER_ID], onDelete: Cascade, onUpdate: Cascade)
  EQUIP_TOWERS  EQUIP_TOWERS?
  @@map("own_towers")
}

model SCORES {
  SCORE_ID     Int @id @default(autoincrement()) @map("score_id")
  USER_ID       Int  @map("user_id")
  MAX_SCORE     Int @default(0) @map("max_score")
  END_TIME      DateTime @map("end_time")


  USERS USERS @relation(fields: [USER_ID], references: [USER_ID], onDelete: Cascade, onUpdate: Cascade)

  @@map("scores")
}